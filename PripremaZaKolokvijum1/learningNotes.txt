* Postavka zadatka:
- Napravicemo ATM machine simulaciju koja simulira podizanje para sa racuna i uplacivanje
- Potrebne su nam dve klase za tekuci i devizni racun
- Imacemo apstraktnu klasu koja sadrzi sve sto je zajednicko za obe
- Imacemo interface koji ce nam sluziti da se odredjene stvari u klasama koje ga implmentiraju zapravo ostvare
- Omoguci da budu razlicite provizije u onodsu da li je devizni ili tekuci

? da li je bolje raditi zadatak od najnizeg nivoa u smislu konkretne klase koje koristimo ili od najviseg nivoa,
  u smislu od parenta?

* Working progress/ explaination
1. Napraviti interface IRacun
	void IsplatiSaRacuna(double iznos)
	void UplatiNaRacun(double iznos)
	string VratiPodatkeORacunu()
	double VratiStanje()

- interface = nam sluzi kao neka vrsta ugovora da sve sto se nalaze u njemu, klasa koja ga implementira
  mora da ispostuje. Interfejs sadrzi samo deklaraciju (potpis metode)
  U interfejsu nemamo access modifier zato sto su po defaultu svi public.

2. Napraviti apstraktnu klasu ApstraktniRacun i implementiraj IRacun interface

- Apstraktna klasa = Ovu klasu pravimo da na neki nacin definisemo sve sto je zajednicko za obe klase koje
  cemo kasnije napraviti
  razlika izmedju apstraktne klase i obicne:
  apstratkna klasa moze da nam sluzi kao kombinacija obicne klase i interfejsa. Sta to znaci?
  U interfejsu ne mozemo da definisemo polja.
  U apstraktnoj klasi mozemo da imamo apstraktne clanove sto znaci da ko god nasledjuje ovu apstraktnu klasu
  mora to da implementira. Znaci mi cemo u ovoj apstraktnoj klasi imati neke apstraktne clanove a sa druge strane
  imacmeo i neke zajednicke stvari za obe klase.
  Ni interfejs ni apstraktna klasa ne mogu da se instanciraju

3. Definisati polja u apstraktnoj klasi (zajednicke stvari)
	private double stanje
	private string brojRacuna

4. Napraviti konstruktor u apstraktnoj klasi
    public ApstraktniRacun(string brojRacuna, double pocetnoStanje)

5. Napraviti jos jedan konstruktor:
	public ApstraktniRacun(string brojRacuna): this(brojRacuna, 0)

6. Implementirati svaku metodu na osnovu interfejsa

7. Napraviti metode ProvizijaNaUplatu i ProvizijaNaIsplatu
	- istrazi formulu za ovo i kako funkcionise 
	- Ovo napraviti da je protected i abstract
	(sta je ovde bolje resenje pitati u funkciji tip racuna ili da overajdamo za svaki)??

8. VratiPodatkeORacunu() metodu implementirati tako da bude viertuelna
	(da li ovo moze da radi i bez virtual?)
- virtual = omogucjujem overidanje unutar metoda koje ce nsladjivati

9. Pravimo klase koje cemo koristiti (Tekuci i Devizni racun), ovde cemo koristiti ulancavnje konstruktora pomocu base:

10. u glavnoj main metodi napraviti simulaciju preko niza tipa apstraktne klase.
  
----- Possible exercises for learning OOP ----
1. Online Biblioteka (Knjige i Časopisi)
Napravićemo sistem za upravljanje pozajmljivanjem u online biblioteci.

Potrebne su dve klase: Knjiga i Casopis.

Imaćemo apstraktnu klasu Publikacija koja sadrži zajedničke stvari kao što su naziv, autor i godina izdavanja.

Imaćemo interface Pozajmljivo koji definiše metode za pozajmljivanje i vraćanje.

Uvedi pravilo da knjige mogu da se pozajme na duže vreme od časopisa.



2. Zdravstveni Sistem (Pacijent i Lekar)
Napraviti simulaciju zdravstvenog sistema gde se obrađuju osobe u sistemu.

Potrebne su dve klase: Pacijent i Lekar.

Apstraktna klasa Osoba sadrži ime, prezime i JMBG.

Interface PrikazPodataka sadrži metodu za prikaz podataka o osobi.

Razlika: Lekar može imati spisak pacijenata, dok pacijent ima karton sa istorijom bolesti.



3. Školski Sistem (Učenik i Profesor)
Simulacija školskog sistema sa učenicima i profesorima.

Klase: Ucenik i Profesor.

Apstraktna klasa OsobaUSkoli sadrži ime, prezime i ID broj.

Interface PrikazInformacija sadrži metodu prikaziInformacije().

Razlika: Profesor ima platu i predmet koji predaje, a učenik ima ocene iz različitih predmeta.



4. Transportni Sistem (Automobil i Bicikl)
Napraviti simulaciju transportnih sredstava.

Klase: Automobil i Bicikl.

Apstraktna klasa TransportnoSredstvo sa zajedničkim podacima: brzina, kapacitet itd.

Interface Pokretanje sa metodom pokreni().

Razlika: Automobil koristi gorivo i ima ograničenje brzine, bicikl nema gorivo ali koristi energiju vozača.



5. E-commerce Platforma (Fizički Proizvod i Digitalni Proizvod)
Simulacija prodaje proizvoda na online platformi.

Klase: FizickiProizvod i DigitalniProizvod.

Apstraktna klasa Proizvod sadrži naziv, cenu i ID.

Interface Dostava sadrži metodu isporuci().

Razlika: Fizički proizvod se šalje poštom, a digitalni se isporučuje mejlom/online.